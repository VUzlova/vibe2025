require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
const sqlite3 = require('sqlite3').verbose();

const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: true });
const API_URL = 'http://localhost:3000/api';

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite
const db = new sqlite3.Database('./database.sqlite');

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é
bot.setMyCommands([
    { command: '/start', description: '–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã' },
    { command: '/register', description: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è' },
    { command: '/login', description: '–í—Ö–æ–¥' },
    { command: '/add_task', description: '–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É' },
    { command: '/edit_task', description: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É' },
    { command: '/delete_task', description: '–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É' },
    { command: '/my_tasks', description: '–ú–æ–∏ –∑–∞–¥–∞—á–∏' },
    { command: '/logout', description: '–í—ã—Ö–æ–¥' }
]);

// –°–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userSessions = {};

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    userSessions[chatId] = { auth: false };
    
    const welcomeMsg = `üìù *To-Do List Bot*\n\n` +
                     `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∞–º–∏.\n\n` +
                     `–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã:\n` +
                     `1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /register\n` +
                     `2. –í–æ–π–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π /login\n\n` +
                     `–ü–æ—Å–ª–µ –≤—Ö–æ–¥–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∞–º–∏.`;
    
    bot.sendMessage(chatId, welcomeMsg, { parse_mode: 'Markdown' });
});

// –ö–æ–º–∞–Ω–¥–∞ /register
bot.onText(/\/register/, (msg) => {
    const chatId = msg.chat.id;
    userSessions[chatId] = { 
        ...userSessions[chatId],
        auth: false,
        waitingForRegister: true,
        waitingForAuth: false
    };
    bot.sendMessage(chatId, '–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n`–ª–æ–≥–∏–Ω:–ø–∞—Ä–æ–ª—å`\n\n–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 5 —Å–∏–º–≤–æ–ª–æ–≤.', {
        parse_mode: 'Markdown'
    });
});

// –ö–æ–º–∞–Ω–¥–∞ /login
bot.onText(/\/login/, (msg) => {
    const chatId = msg.chat.id;
    userSessions[chatId] = { 
        ...userSessions[chatId],
        auth: false,
        waitingForAuth: true,
        waitingForRegister: false
    };
    bot.sendMessage(chatId, '–î–ª—è –≤—Ö–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n`–ª–æ–≥–∏–Ω:–ø–∞—Ä–æ–ª—å`', {
        parse_mode: 'Markdown'
    });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;
    const session = userSessions[chatId] || { auth: false };

    if (!text || text.startsWith('/')) return;

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    if (session.waitingForRegister) {
        try {
            const [username, password] = text.split(':');
            
            if (!username || !password || password.length < 5) {
                throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–ª–∏ –ø–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (–º–∏–Ω. 5 —Å–∏–º–≤–æ–ª–æ–≤)');
            }

            const response = await axios.post(`${API_URL}/register`, {
                username: username.trim(),
                password: password.trim()
            });

            userSessions[chatId] = {
                auth: true,
                userId: response.data.userId,
                username: username.trim(),
                state: null
            };

            bot.sendMessage(chatId, `‚úÖ *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!*\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∞–º–∏.`, {
                parse_mode: 'Markdown'
            });
        } catch (error) {
            const errorMsg = error.response?.data?.error || error.message;
            bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${errorMsg}`);
        }
        return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞
    if (session.waitingForAuth) {
        try {
            const [username, password] = text.split(':');
            
            if (!username || !password) {
                throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞');
            }

            const response = await axios.post(`${API_URL}/login`, {
                username: username.trim(),
                password: password.trim()
            });

            userSessions[chatId] = {
                auth: true,
                userId: response.data.userId,
                username: username.trim(),
                state: null
            };

            const tasksResponse = await axios.get(`${API_URL}/todos/${response.data.userId}`);
            const tasks = tasksResponse.data;

            bot.sendMessage(chatId, `‚úÖ *–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω!*\n\n–í—Å–µ–≥–æ –∑–∞–¥–∞—á: ${tasks.length}\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏.`, {
                parse_mode: 'Markdown'
            });
        } catch (error) {
            const errorMsg = error.response?.data?.error || error.message;
            bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: ${errorMsg}`);
        }
        return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    if (session.auth) {
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
        if (session.state === 'adding_task') {
            try {
                await axios.post(`${API_URL}/todos/${session.userId}`, {
                    task_text: text
                });
                
                userSessions[chatId].state = null;
                bot.sendMessage(chatId, `‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞:\n"${text}"`);
            } catch (error) {
                bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É');
            }
            return;
        }

        // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
        if (session.state === 'editing_task') {
            try {
                const taskNumber = parseInt(text);
                const tasksResponse = await axios.get(`${API_URL}/todos/${session.userId}`);
                const tasks = tasksResponse.data;
                
                if (isNaN(taskNumber)) throw new Error('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏');
                if (taskNumber < 1 || taskNumber > tasks.length) throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏');
                
                userSessions[chatId].state = 'editing_task_text';
                userSessions[chatId].editingTaskId = tasks[taskNumber - 1].id;
                
                bot.sendMessage(chatId, `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–¥–∞—á–∏ ‚Ññ${taskNumber}:\n\n–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç: "${tasks[taskNumber - 1].text}"`);
            } catch (error) {
                bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
            }
            return;
        }

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
        if (session.state === 'editing_task_text') {
            try {
                await axios.put(`${API_URL}/todos/${session.userId}/${session.editingTaskId}`, {
                    task_text: text
                });
                
                userSessions[chatId].state = null;
                bot.sendMessage(chatId, `‚úÖ –ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:\n"${text}"`);
            } catch (error) {
                bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É');
            }
            return;
        }

        // –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
        if (session.state === 'deleting_task') {
            try {
                const taskNumber = parseInt(text);
                const tasksResponse = await axios.get(`${API_URL}/todos/${session.userId}`);
                const tasks = tasksResponse.data;
                
                if (isNaN(taskNumber)) throw new Error('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏');
                if (taskNumber < 1 || taskNumber > tasks.length) throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏');
                
                await axios.delete(`${API_URL}/todos/${session.userId}/${tasks[taskNumber - 1].id}`);
                
                userSessions[chatId].state = null;
                bot.sendMessage(chatId, `‚úÖ –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞`);
            } catch (error) {
                bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
            }
            return;
        }
    }
});

// –ö–æ–º–∞–Ω–¥–∞ /add_task
bot.onText(/\/add_task/, (msg) => {
    const chatId = msg.chat.id;
    const session = userSessions[chatId];
    
    if (!session?.auth) {
        return bot.sendMessage(chatId, '–°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /login');
    }
    
    userSessions[chatId].state = 'adding_task';
    bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏:');
});

// –ö–æ–º–∞–Ω–¥–∞ /edit_task
bot.onText(/\/edit_task/, async (msg) => {
    const chatId = msg.chat.id;
    const session = userSessions[chatId];
    
    if (!session?.auth) {
        return bot.sendMessage(chatId, '–°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /login');
    }
    
    try {
        const response = await axios.get(`${API_URL}/todos/${session.userId}`);
        const tasks = response.data;
        
        if (tasks.length === 0) {
            return bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!');
        }
        
        userSessions[chatId].state = 'editing_task';
        
        const taskList = tasks.map((task, index) => `${index + 1}. ${task.text}`).join('\n');
        bot.sendMessage(chatId, `–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n${taskList}`);
    } catch (error) {
        bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–¥–∞—á–∏');
    }
});

// –ö–æ–º–∞–Ω–¥–∞ /delete_task
bot.onText(/\/delete_task/, async (msg) => {
    const chatId = msg.chat.id;
    const session = userSessions[chatId];
    
    if (!session?.auth) {
        return bot.sendMessage(chatId, '–°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /login');
    }
    
    try {
        const response = await axios.get(`${API_URL}/todos/${session.userId}`);
        const tasks = response.data;
        
        if (tasks.length === 0) {
            return bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!');
        }
        
        userSessions[chatId].state = 'deleting_task';
        
        const taskList = tasks.map((task, index) => `${index + 1}. ${task.text}`).join('\n');
        bot.sendMessage(chatId, `–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n${taskList}`);
    } catch (error) {
        bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–¥–∞—á–∏');
    }
});

// –ö–æ–º–∞–Ω–¥–∞ /my_tasks
bot.onText(/\/my_tasks/, async (msg) => {
    const chatId = msg.chat.id;
    const session = userSessions[chatId];
    
    if (!session?.auth) {
        return bot.sendMessage(chatId, '–°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /login');
    }
    
    try {
        const response = await axios.get(`${API_URL}/todos/${session.userId}`);
        const tasks = response.data;
        const currentDate = new Date().toLocaleString('ru-RU');
        
        if (tasks.length === 0) {
            return bot.sendMessage(chatId, `–ù–∞ ${currentDate} —É –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á!`);
        }
        
        const taskList = tasks.map((task, index) => `${index + 1}. ${task.text}`).join('\n');
        bot.sendMessage(chatId, `üìÖ *–í–∞—à–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ ${currentDate}:*\n\n${taskList}\n\n–í—Å–µ–≥–æ –∑–∞–¥–∞—á: ${tasks.length}`, {
            parse_mode: 'Markdown'
        });
    } catch (error) {
        bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–¥–∞—á–∏');
    }
});

// –ö–æ–º–∞–Ω–¥–∞ /logout
bot.onText(/\/logout/, (msg) => {
    const chatId = msg.chat.id;
    userSessions[chatId] = { auth: false };
    bot.sendMessage(chatId, '–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã. –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login');
});

console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');